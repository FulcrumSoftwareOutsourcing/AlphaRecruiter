/********************************************************************
 *  FulcrumWeb RAD Framework - Fulcrum of your business             *
 *  Copyright (c) 2002-2010 FulcrumWeb, ALL RIGHTS RESERVED         *
 *                                                                  *
 *  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED      *
 *  FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE        *
 *  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE       *
 *  AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT  *
 *  AND PERMISSION FROM FULCRUMWEB. CONSULT THE END USER LICENSE    *
 *  AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.           *
 ********************************************************************/

//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.573
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by wsdl, Version=1.1.4322.573.
// 
namespace Framework.Db.WebServiceClient {
    using System.Diagnostics;
    using System.Xml.Serialization;
    using System;
    using System.Web.Services.Protocols;
    using System.ComponentModel;
    using System.Web.Services;
    
    
    /// <remarks/>
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="CxDbServiceSoap", Namespace="http://framework.db.webservice")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CxDbParameterDescription[]))]
    public class CxDbService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        /// <remarks/>
        public CxDbService() {
            this.Url = "http://localhost/framework.db.webservice/dbservice.asmx";
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://framework.db.webservice/RegisterClient", RequestNamespace="http://framework.db.webservice", ResponseNamespace="http://framework.db.webservice", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWebServiceClientRegistrationRecord RegisterClient() {
            object[] results = this.Invoke("RegisterClient", new object[0]);
            return ((CxWebServiceClientRegistrationRecord)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginRegisterClient(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("RegisterClient", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public CxWebServiceClientRegistrationRecord EndRegisterClient(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((CxWebServiceClientRegistrationRecord)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://framework.db.webservice/ExecuteSQL", RequestNamespace="http://framework.db.webservice", ResponseNamespace="http://framework.db.webservice", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxDbCommandResult ExecuteSQL(System.Guid clientId, string connectionName, string userId, string password, System.Guid transactionId, CxDbCommandDescription command) {
            object[] results = this.Invoke("ExecuteSQL", new object[] {
                        clientId,
                        connectionName,
                        userId,
                        password,
                        transactionId,
                        command});
            return ((CxDbCommandResult)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginExecuteSQL(System.Guid clientId, string connectionName, string userId, string password, System.Guid transactionId, CxDbCommandDescription command, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ExecuteSQL", new object[] {
                        clientId,
                        connectionName,
                        userId,
                        password,
                        transactionId,
                        command}, callback, asyncState);
        }
        
        /// <remarks/>
        public CxDbCommandResult EndExecuteSQL(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((CxDbCommandResult)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://framework.db.webservice/Commit", RequestNamespace="http://framework.db.webservice", ResponseNamespace="http://framework.db.webservice", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void Commit(System.Guid clientId, string connectionName, string userId, string password, System.Guid transactionId) {
            this.Invoke("Commit", new object[] {
                        clientId,
                        connectionName,
                        userId,
                        password,
                        transactionId});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginCommit(System.Guid clientId, string connectionName, string userId, string password, System.Guid transactionId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Commit", new object[] {
                        clientId,
                        connectionName,
                        userId,
                        password,
                        transactionId}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndCommit(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://framework.db.webservice/Rollback", RequestNamespace="http://framework.db.webservice", ResponseNamespace="http://framework.db.webservice", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void Rollback(System.Guid clientId, string connectionName, string userId, string password, System.Guid transactionId) {
            this.Invoke("Rollback", new object[] {
                        clientId,
                        connectionName,
                        userId,
                        password,
                        transactionId});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginRollback(System.Guid clientId, string connectionName, string userId, string password, System.Guid transactionId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Rollback", new object[] {
                        clientId,
                        connectionName,
                        userId,
                        password,
                        transactionId}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndRollback(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://framework.db.webservice/UploadSQL", RequestNamespace="http://framework.db.webservice", ResponseNamespace="http://framework.db.webservice", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UploadSQL(System.Guid clientId, string connectionName, string userId, string password, System.Guid commandId, CxDbCommandDescription command) {
            this.Invoke("UploadSQL", new object[] {
                        clientId,
                        connectionName,
                        userId,
                        password,
                        commandId,
                        command});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginUploadSQL(System.Guid clientId, string connectionName, string userId, string password, System.Guid commandId, CxDbCommandDescription command, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("UploadSQL", new object[] {
                        clientId,
                        connectionName,
                        userId,
                        password,
                        commandId,
                        command}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndUploadSQL(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://framework.db.webservice/AppendUploadedSQLParamBinaryValue", RequestNamespace="http://framework.db.webservice", ResponseNamespace="http://framework.db.webservice", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AppendUploadedSQLParamBinaryValue(System.Guid clientId, string connectionName, string userId, string password, System.Guid commandId, int paramIndex, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] System.Byte[] valueChunk) {
            this.Invoke("AppendUploadedSQLParamBinaryValue", new object[] {
                        clientId,
                        connectionName,
                        userId,
                        password,
                        commandId,
                        paramIndex,
                        valueChunk});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginAppendUploadedSQLParamBinaryValue(System.Guid clientId, string connectionName, string userId, string password, System.Guid commandId, int paramIndex, System.Byte[] valueChunk, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AppendUploadedSQLParamBinaryValue", new object[] {
                        clientId,
                        connectionName,
                        userId,
                        password,
                        commandId,
                        paramIndex,
                        valueChunk}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndAppendUploadedSQLParamBinaryValue(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://framework.db.webservice/AppendUploadedSQLParamStringValue", RequestNamespace="http://framework.db.webservice", ResponseNamespace="http://framework.db.webservice", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AppendUploadedSQLParamStringValue(System.Guid clientId, string connectionName, string userId, string password, System.Guid commandId, int paramIndex, string valueChunk) {
            this.Invoke("AppendUploadedSQLParamStringValue", new object[] {
                        clientId,
                        connectionName,
                        userId,
                        password,
                        commandId,
                        paramIndex,
                        valueChunk});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginAppendUploadedSQLParamStringValue(System.Guid clientId, string connectionName, string userId, string password, System.Guid commandId, int paramIndex, string valueChunk, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AppendUploadedSQLParamStringValue", new object[] {
                        clientId,
                        connectionName,
                        userId,
                        password,
                        commandId,
                        paramIndex,
                        valueChunk}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndAppendUploadedSQLParamStringValue(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://framework.db.webservice/ExecuteLoadedSQL", RequestNamespace="http://framework.db.webservice", ResponseNamespace="http://framework.db.webservice", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxDbCommandResult ExecuteLoadedSQL(System.Guid clientId, string connectionName, string userId, string password, System.Guid transactionId, System.Guid commandId) {
            object[] results = this.Invoke("ExecuteLoadedSQL", new object[] {
                        clientId,
                        connectionName,
                        userId,
                        password,
                        transactionId,
                        commandId});
            return ((CxDbCommandResult)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginExecuteLoadedSQL(System.Guid clientId, string connectionName, string userId, string password, System.Guid transactionId, System.Guid commandId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ExecuteLoadedSQL", new object[] {
                        clientId,
                        connectionName,
                        userId,
                        password,
                        transactionId,
                        commandId}, callback, asyncState);
        }
        
        /// <remarks/>
        public CxDbCommandResult EndExecuteLoadedSQL(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((CxDbCommandResult)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://framework.db.webservice/GetStatistics", RequestNamespace="http://framework.db.webservice", ResponseNamespace="http://framework.db.webservice", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetStatistics() {
            object[] results = this.Invoke("GetStatistics", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetStatistics(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetStatistics", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetStatistics(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
    }
    
/*
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://framework.db.webservice")]
    public class CxWebServiceClientRegistrationRecord {
        
        /// <remarks/>
        public System.Guid ClientID;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public System.Byte[] ClientKey;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://framework.db.webservice")]
    public class CxDbCommandResult {
        
        /// <remarks/>
        [System.ComponentModel.DefaultValueAttribute(-1)]
        public int RowsAffected = -1;
        
        /// <remarks/>
        public object ScalarValue;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public System.Byte[] SerializedDataSet;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public System.Byte[] SerializedDataTable;
        
        /// <remarks/>
        public string[] OutputParamNames;
        
        /// <remarks/>
        public object[] OutputParamValues;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://framework.db.webservice")]
    public class CxDbParameterDescription {
        
        /// <remarks/>
        public string Name;
        
        /// <remarks/>
        public DbType DataType;
        
        /// <remarks/>
        public ParameterDirection Direction;
        
        /// <remarks/>
        public object Value;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://framework.db.webservice")]
    public enum DbType {
        
        /// <remarks/>
        AnsiString,
        
        /// <remarks/>
        Binary,
        
        /// <remarks/>
        Byte,
        
        /// <remarks/>
        Boolean,
        
        /// <remarks/>
        Currency,
        
        /// <remarks/>
        Date,
        
        /// <remarks/>
        DateTime,
        
        /// <remarks/>
        Decimal,
        
        /// <remarks/>
        Double,
        
        /// <remarks/>
        Guid,
        
        /// <remarks/>
        Int16,
        
        /// <remarks/>
        Int32,
        
        /// <remarks/>
        Int64,
        
        /// <remarks/>
        Object,
        
        /// <remarks/>
        SByte,
        
        /// <remarks/>
        Single,
        
        /// <remarks/>
        String,
        
        /// <remarks/>
        Time,
        
        /// <remarks/>
        UInt16,
        
        /// <remarks/>
        UInt32,
        
        /// <remarks/>
        UInt64,
        
        /// <remarks/>
        VarNumeric,
        
        /// <remarks/>
        AnsiStringFixedLength,
        
        /// <remarks/>
        StringFixedLength,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://framework.db.webservice")]
    public enum ParameterDirection {
        
        /// <remarks/>
        Input,
        
        /// <remarks/>
        Output,
        
        /// <remarks/>
        InputOutput,
        
        /// <remarks/>
        ReturnValue,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://framework.db.webservice")]
    public class CxDbCommandDescription {
        
        /// <remarks/>
        public string CommandText;
        
        /// <remarks/>
        [System.ComponentModel.DefaultValueAttribute(CommandType.Text)]
        public CommandType CommandType = CommandType.Text;
        
        /// <remarks/>
        [System.ComponentModel.DefaultValueAttribute(CommandBehavior.Default)]
        public CommandBehavior CommandBehavior = CommandBehavior.Default;
        
        /// <remarks/>
        [System.ComponentModel.DefaultValueAttribute(0)]
        public int CommandTimeout = 0;
        
        /// <remarks/>
        public CxDbParameterDescription[] Parameters;
        
        /// <remarks/>
        [System.ComponentModel.DefaultValueAttribute(NxSqlResult.None)]
        public NxSqlResult SqlResult = NxSqlResult.None;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://framework.db.webservice")]
    public enum CommandType {
        
        /// <remarks/>
        Text,
        
        /// <remarks/>
        StoredProcedure,
        
        /// <remarks/>
        TableDirect,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://framework.db.webservice")]
    [System.FlagsAttribute()]
    public enum CommandBehavior {
        
        /// <remarks/>
        Default = 1,
        
        /// <remarks/>
        SingleResult = 2,
        
        /// <remarks/>
        SchemaOnly = 4,
        
        /// <remarks/>
        KeyInfo = 8,
        
        /// <remarks/>
        SingleRow = 16,
        
        /// <remarks/>
        SequentialAccess = 32,
        
        /// <remarks/>
        CloseConnection = 64,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://framework.db.webservice")]
    public enum NxSqlResult {
        
        /// <remarks/>
        None,
        
        /// <remarks/>
        RowsAffected,
        
        /// <remarks/>
        Scalar,
        
        /// <remarks/>
        DataSet,
        
        /// <remarks/>
        SchemaTable,
    }
*/    
}
